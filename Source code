File: accident_prediction.pyFile: accident_prediction.py

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
import pickle

# Load and prepare data
def load_and_preprocess(file_path):
    data = pd.read_csv(file_path)
    print("Initial data shape:", data.shape)

    # Example: drop non-numeric or irrelevant columns (customize as needed)
    if 'accident_severity' not in data.columns:
        raise ValueError("Dataset must have 'accident_severity' column")

    data = data.dropna()
    X = data.drop('accident_severity', axis=1)
    y = data['accident_severity']

    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    return train_test_split(X_scaled, y, test_size=0.2, random_state=42), scaler

# Train and evaluate the model
def train_model(X_train, X_test, y_train, y_test):
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)

    y_pred = model.predict(X_test)
    print("Classification Report:\n", classification_report(y_test, y_pred))

    # Save model
    with open("accident_model.pkl", "wb") as f:
        pickle.dump(model, f)
    print("Model saved to 'accident_model.pkl'")

    return model

# Predict accident severity from new input
def predict_severity(input_features):
    with open("accident_model.pkl", "rb") as f:
        model = pickle.load(f)
    prediction = model.predict([input_features])
    return prediction[0]

# Main runner
if __name__ == "__main__":
    # Path to dataset (CSV must contain numeric features + 'accident_severity' column)
    dataset_path = "accidents.csv"

    try:
        (X_train, X_test, y_train, y_test), scaler = load_and_preprocess(dataset_path)
        model = train_model(X_train, X_test, y_train, y_test)

        # Example prediction
        example = X_test[0]
        predicted = predict_severity(example)
        print(f"Predicted Severity: {predicted}")

    except Exception as e:
        print("Error:", e)ï¿¼Enter
